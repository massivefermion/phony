use std::io::{BufReader, Cursor, Write};

mod error;
mod loader;

const METADATA_URL: &str =
    "https://github.com/google/libphonenumber/raw/master/resources/PhoneNumberMetadata.xml";

const GLEAM_FILE_PATH: &str = "src/phony/metadata.gleam";

const COUNTRIES: [(&str, &str, &str); 249] = [
    ("AD", "Andorra", "ğŸ‡¦ğŸ‡©"),
    ("AE", "United Arab Emirates", "ğŸ‡¦ğŸ‡ª"),
    ("AF", "Afghanistan", "ğŸ‡¦ğŸ‡«"),
    ("AG", "Antigua and Barbuda", "ğŸ‡¦ğŸ‡¬"),
    ("AI", "Anguilla", "ğŸ‡¦ğŸ‡®"),
    ("AL", "Albania", "ğŸ‡¦ğŸ‡±"),
    ("AM", "Armenia", "ğŸ‡¦ğŸ‡²"),
    ("AO", "Angola", "ğŸ‡¦ğŸ‡´"),
    ("AQ", "Antarctica", "ğŸ‡¦ğŸ‡¶"),
    ("AR", "Argentina", "ğŸ‡¦ğŸ‡·"),
    ("AS", "American Samoa", "ğŸ‡¦ğŸ‡¸"),
    ("AT", "Austria", "ğŸ‡¦ğŸ‡¹"),
    ("AU", "Australia", "ğŸ‡¦ğŸ‡º"),
    ("AW", "Aruba", "ğŸ‡¦ğŸ‡¼"),
    ("AX", "Ã…land Islands", "ğŸ‡¦ğŸ‡½"),
    ("AZ", "Azerbaijan", "ğŸ‡¦ğŸ‡¿"),
    ("BA", "Bosnia and Herzegovina", "ğŸ‡§ğŸ‡¦"),
    ("BB", "Barbados", "ğŸ‡§ğŸ‡§"),
    ("BD", "Bangladesh", "ğŸ‡§ğŸ‡©"),
    ("BE", "Belgium", "ğŸ‡§ğŸ‡ª"),
    ("BF", "Burkina Faso", "ğŸ‡§ğŸ‡«"),
    ("BG", "Bulgaria", "ğŸ‡§ğŸ‡¬"),
    ("BH", "Bahrain", "ğŸ‡§ğŸ‡­"),
    ("BI", "Burundi", "ğŸ‡§ğŸ‡®"),
    ("BJ", "Benin", "ğŸ‡§ğŸ‡¯"),
    ("BL", "Saint BarthÃ©lemy", "ğŸ‡§ğŸ‡±"),
    ("BM", "Bermuda", "ğŸ‡§ğŸ‡²"),
    ("BN", "Brunei Darussalam", "ğŸ‡§ğŸ‡³"),
    ("BO", "Bolivia (Plurinational State of)", "ğŸ‡§ğŸ‡´"),
    ("BQ", "Bonaire, Sint Eustatius, Saba", "ğŸ‡§ğŸ‡¶"),
    ("BR", "Brazil", "ğŸ‡§ğŸ‡·"),
    ("BS", "Bahamas", "ğŸ‡§ğŸ‡¸"),
    ("BT", "Bhutan", "ğŸ‡§ğŸ‡¹"),
    ("BV", "Bouvet Island", "ğŸ‡§ğŸ‡»"),
    ("BW", "Botswana", "ğŸ‡§ğŸ‡¼"),
    ("BY", "Belarus", "ğŸ‡§ğŸ‡¾"),
    ("BZ", "Belize", "ğŸ‡§ğŸ‡¿"),
    ("CA", "Canada", "ğŸ‡¨ğŸ‡¦"),
    ("CC", "Cocos (Keeling) Islands", "ğŸ‡¨ğŸ‡¨"),
    ("CD", "Congo (the Democratic Republic of)", "ğŸ‡¨ğŸ‡©"),
    ("CF", "Central African Republic", "ğŸ‡¨ğŸ‡«"),
    ("CG", "Congo", "ğŸ‡¨ğŸ‡¬"),
    ("CH", "Switzerland", "ğŸ‡¨ğŸ‡­"),
    ("CI", "CÃ´te d'Ivoire", "ğŸ‡¨ğŸ‡®"),
    ("CK", "Cook Islands", "ğŸ‡¨ğŸ‡°"),
    ("CL", "Chile", "ğŸ‡¨ğŸ‡±"),
    ("CM", "Cameroon", "ğŸ‡¨ğŸ‡²"),
    ("CN", "China", "ğŸ‡¨ğŸ‡³"),
    ("CO", "Colombia", "ğŸ‡¨ğŸ‡´"),
    ("CR", "Costa Rica", "ğŸ‡¨ğŸ‡·"),
    ("CU", "Cuba", "ğŸ‡¨ğŸ‡º"),
    ("CV", "Cabo Verde", "ğŸ‡¨ğŸ‡»"),
    ("CW", "CuraÃ§ao", "ğŸ‡¨ğŸ‡¼"),
    ("CX", "Christmas Island", "ğŸ‡¨ğŸ‡½"),
    ("CY", "Cyprus", "ğŸ‡¨ğŸ‡¾"),
    ("CZ", "Czechia", "ğŸ‡¨ğŸ‡¿"),
    ("DE", "Germany", "ğŸ‡©ğŸ‡ª"),
    ("DJ", "Djibouti", "ğŸ‡©ğŸ‡¯"),
    ("DK", "Denmark", "ğŸ‡©ğŸ‡°"),
    ("DM", "Dominica", "ğŸ‡©ğŸ‡²"),
    ("DO", "Dominican Republic", "ğŸ‡©ğŸ‡´"),
    ("DZ", "Algeria", "ğŸ‡©ğŸ‡¿"),
    ("EC", "Ecuador", "ğŸ‡ªğŸ‡¨"),
    ("EE", "Estonia", "ğŸ‡ªğŸ‡ª"),
    ("EG", "Egypt", "ğŸ‡ªğŸ‡¬"),
    ("EH", "Western Sahara", "ğŸ‡ªğŸ‡­"),
    ("ER", "Eritrea", "ğŸ‡ªğŸ‡·"),
    ("ES", "Spain", "ğŸ‡ªğŸ‡¸"),
    ("ET", "Ethiopia", "ğŸ‡ªğŸ‡¹"),
    ("FI", "Finland", "ğŸ‡«ğŸ‡®"),
    ("FJ", "Fiji", "ğŸ‡«ğŸ‡¯"),
    ("FK", "Falkland Islands (Malvinas)", "ğŸ‡«ğŸ‡°"),
    ("FM", "Micronesia (Federated States of)", "ğŸ‡«ğŸ‡²"),
    ("FO", "Faroe Islands", "ğŸ‡«ğŸ‡´"),
    ("FR", "France", "ğŸ‡«ğŸ‡·"),
    ("GA", "Gabon", "ğŸ‡¬ğŸ‡¦"),
    (
        "GB",
        "United Kingdom of Great Britain and Northern Ireland",
        "ğŸ‡¬ğŸ‡§",
    ),
    ("GD", "Grenada", "ğŸ‡¬ğŸ‡©"),
    ("GE", "Georgia", "ğŸ‡¬ğŸ‡ª"),
    ("GF", "French Guiana", "ğŸ‡¬ğŸ‡«"),
    ("GG", "Guernsey", "ğŸ‡¬ğŸ‡¬"),
    ("GH", "Ghana", "ğŸ‡¬ğŸ‡­"),
    ("GI", "Gibraltar", "ğŸ‡¬ğŸ‡®"),
    ("GL", "Greenland", "ğŸ‡¬ğŸ‡±"),
    ("GM", "Gambia", "ğŸ‡¬ğŸ‡²"),
    ("GN", "Guinea", "ğŸ‡¬ğŸ‡³"),
    ("GP", "Guadeloupe", "ğŸ‡¬ğŸ‡µ"),
    ("GQ", "Equatorial Guinea", "ğŸ‡¬ğŸ‡¶"),
    ("GR", "Greece", "ğŸ‡¬ğŸ‡·"),
    ("GS", "South Georgia and", "ğŸ‡¬ğŸ‡¸"),
    ("GT", "Guatemala", "ğŸ‡¬ğŸ‡¹"),
    ("GU", "Guam", "ğŸ‡¬ğŸ‡º"),
    ("GW", "Guinea-Bissau", "ğŸ‡¬ğŸ‡¼"),
    ("GY", "Guyana", "ğŸ‡¬ğŸ‡¾"),
    ("HK", "Hong Kong", "ğŸ‡­ğŸ‡°"),
    ("HM", "Heard Island and McDonald Islands", "ğŸ‡­ğŸ‡²"),
    ("HN", "Honduras", "ğŸ‡­ğŸ‡³"),
    ("HR", "Croatia", "ğŸ‡­ğŸ‡·"),
    ("HT", "Haiti", "ğŸ‡­ğŸ‡¹"),
    ("HU", "Hungary", "ğŸ‡­ğŸ‡º"),
    ("ID", "Indonesia", "ğŸ‡®ğŸ‡©"),
    ("IE", "Ireland", "ğŸ‡®ğŸ‡ª"),
    ("IL", "Israel", "ğŸ‡®ğŸ‡±"),
    ("IM", "Isle of Man", "ğŸ‡®ğŸ‡²"),
    ("IN", "India", "ğŸ‡®ğŸ‡³"),
    ("IO", "British Indian Ocean Territory", "ğŸ‡®ğŸ‡´"),
    ("IQ", "Iraq", "ğŸ‡®ğŸ‡¶"),
    ("IR", "Iran (Islamic Republic of)", "ğŸ‡®ğŸ‡·"),
    ("IS", "Iceland", "ğŸ‡®ğŸ‡¸"),
    ("IT", "Italy", "ğŸ‡®ğŸ‡¹"),
    ("JE", "Jersey", "ğŸ‡¯ğŸ‡ª"),
    ("JM", "Jamaica", "ğŸ‡¯ğŸ‡²"),
    ("JO", "Jordan", "ğŸ‡¯ğŸ‡´"),
    ("JP", "Japan", "ğŸ‡¯ğŸ‡µ"),
    ("KE", "Kenya", "ğŸ‡°ğŸ‡ª"),
    ("KG", "Kyrgyzstan", "ğŸ‡°ğŸ‡¬"),
    ("KH", "Cambodia", "ğŸ‡°ğŸ‡­"),
    ("KI", "Kiribati", "ğŸ‡°ğŸ‡®"),
    ("KM", "Comoros", "ğŸ‡°ğŸ‡²"),
    ("KN", "Saint Kitts and Nevis", "ğŸ‡°ğŸ‡³"),
    ("KP", "Korea (the Democratic People's Republic of)", "ğŸ‡°ğŸ‡µ"),
    ("KR", "Korea (the Republic of)", "ğŸ‡°ğŸ‡·"),
    ("KW", "Kuwait", "ğŸ‡°ğŸ‡¼"),
    ("KY", "Cayman Islands", "ğŸ‡°ğŸ‡¾"),
    ("KZ", "Kazakhstan", "ğŸ‡°ğŸ‡¿"),
    ("LA", "Lao People's Democratic Republic", "ğŸ‡±ğŸ‡¦"),
    ("LB", "Lebanon", "ğŸ‡±ğŸ‡§"),
    ("LC", "Saint Lucia", "ğŸ‡±ğŸ‡¨"),
    ("LI", "Liechtenstein", "ğŸ‡±ğŸ‡®"),
    ("LK", "Sri Lanka", "ğŸ‡±ğŸ‡°"),
    ("LR", "Liberia", "ğŸ‡±ğŸ‡·"),
    ("LS", "Lesotho", "ğŸ‡±ğŸ‡¸"),
    ("LT", "Lithuania", "ğŸ‡±ğŸ‡¹"),
    ("LU", "Luxembourg", "ğŸ‡±ğŸ‡º"),
    ("LV", "Latvia", "ğŸ‡±ğŸ‡»"),
    ("LY", "Libya", "ğŸ‡±ğŸ‡¾"),
    ("MA", "Morocco", "ğŸ‡²ğŸ‡¦"),
    ("MC", "Monaco", "ğŸ‡²ğŸ‡¨"),
    ("MD", "Moldova (the Republic of)", "ğŸ‡²ğŸ‡©"),
    ("ME", "Montenegro", "ğŸ‡²ğŸ‡ª"),
    ("MF", "Saint Martin (French part)", "ğŸ‡²ğŸ‡«"),
    ("MG", "Madagascar", "ğŸ‡²ğŸ‡¬"),
    ("MH", "Marshall Islands", "ğŸ‡²ğŸ‡­"),
    ("MK", "North Macedonia", "ğŸ‡²ğŸ‡°"),
    ("ML", "Mali", "ğŸ‡²ğŸ‡±"),
    ("MM", "Myanmar", "ğŸ‡²ğŸ‡²"),
    ("MN", "Mongolia", "ğŸ‡²ğŸ‡³"),
    ("MO", "Macao", "ğŸ‡²ğŸ‡´"),
    ("MP", "Northern Mariana Islands", "ğŸ‡²ğŸ‡µ"),
    ("MQ", "Martinique", "ğŸ‡²ğŸ‡¶"),
    ("MR", "Mauritania", "ğŸ‡²ğŸ‡·"),
    ("MS", "Montserrat", "ğŸ‡²ğŸ‡¸"),
    ("MT", "Malta", "ğŸ‡²ğŸ‡¹"),
    ("MU", "Mauritius", "ğŸ‡²ğŸ‡º"),
    ("MV", "Maldives", "ğŸ‡²ğŸ‡»"),
    ("MW", "Malawi", "ğŸ‡²ğŸ‡¼"),
    ("MX", "Mexico", "ğŸ‡²ğŸ‡½"),
    ("MY", "Malaysia", "ğŸ‡²ğŸ‡¾"),
    ("MZ", "Mozambique", "ğŸ‡²ğŸ‡¿"),
    ("NA", "Namibia", "ğŸ‡³ğŸ‡¦"),
    ("NC", "New Caledonia", "ğŸ‡³ğŸ‡¨"),
    ("NE", "Niger", "ğŸ‡³ğŸ‡ª"),
    ("NF", "Norfolk Island", "ğŸ‡³ğŸ‡«"),
    ("NG", "Nigeria", "ğŸ‡³ğŸ‡¬"),
    ("NI", "Nicaragua", "ğŸ‡³ğŸ‡®"),
    ("NL", "Netherlands, Kingdom of", "ğŸ‡³ğŸ‡±"),
    ("NO", "Norway", "ğŸ‡³ğŸ‡´"),
    ("NP", "Nepal", "ğŸ‡³ğŸ‡µ"),
    ("NR", "Nauru", "ğŸ‡³ğŸ‡·"),
    ("NU", "Niue", "ğŸ‡³ğŸ‡º"),
    ("NZ", "New Zealand", "ğŸ‡³ğŸ‡¿"),
    ("OM", "Oman", "ğŸ‡´ğŸ‡²"),
    ("PA", "Panama", "ğŸ‡µğŸ‡¦"),
    ("PE", "Peru", "ğŸ‡µğŸ‡ª"),
    ("PF", "French Polynesia", "ğŸ‡µğŸ‡«"),
    ("PG", "Papua New Guinea", "ğŸ‡µğŸ‡¬"),
    ("PH", "Philippines", "ğŸ‡µğŸ‡­"),
    ("PK", "Pakistan", "ğŸ‡µğŸ‡°"),
    ("PL", "Poland", "ğŸ‡µğŸ‡±"),
    ("PM", "Saint Pierre and Miquelon", "ğŸ‡µğŸ‡²"),
    ("PN", "Pitcairn", "ğŸ‡µğŸ‡³"),
    ("PR", "Puerto Rico", "ğŸ‡µğŸ‡·"),
    ("PS", "Palestine, State of", "ğŸ‡µğŸ‡¸"),
    ("PT", "Portugal", "ğŸ‡µğŸ‡¹"),
    ("PW", "Palau", "ğŸ‡µğŸ‡¼"),
    ("PY", "Paraguay", "ğŸ‡µğŸ‡¾"),
    ("QA", "Qatar", "ğŸ‡¶ğŸ‡¦"),
    ("RE", "RÃ©union", "ğŸ‡·ğŸ‡ª"),
    ("RO", "Romania", "ğŸ‡·ğŸ‡´"),
    ("RS", "Serbia", "ğŸ‡·ğŸ‡¸"),
    ("RU", "Russian Federation", "ğŸ‡·ğŸ‡º"),
    ("RW", "Rwanda", "ğŸ‡·ğŸ‡¼"),
    ("SA", "Saudi Arabia", "ğŸ‡¸ğŸ‡¦"),
    ("SB", "Solomon Islands", "ğŸ‡¸ğŸ‡§"),
    ("SC", "Seychelles", "ğŸ‡¸ğŸ‡¨"),
    ("SD", "Sudan", "ğŸ‡¸ğŸ‡©"),
    ("SE", "Sweden", "ğŸ‡¸ğŸ‡ª"),
    ("SG", "Singapore", "ğŸ‡¸ğŸ‡¬"),
    (
        "SH",
        "Saint Helena, Ascension Island, Tristan da Cunha",
        "ğŸ‡¸ğŸ‡­",
    ),
    ("SI", "Slovenia", "ğŸ‡¸ğŸ‡®"),
    ("SJ", "Svalbard, Jan Mayen", "ğŸ‡¸ğŸ‡¯"),
    ("SK", "Slovakia", "ğŸ‡¸ğŸ‡°"),
    ("SL", "Sierra Leone", "ğŸ‡¸ğŸ‡±"),
    ("SM", "San Marino", "ğŸ‡¸ğŸ‡²"),
    ("SN", "Senegal", "ğŸ‡¸ğŸ‡³"),
    ("SO", "Somalia", "ğŸ‡¸ğŸ‡´"),
    ("SR", "Suriname", "ğŸ‡¸ğŸ‡·"),
    ("SS", "South Sudan", "ğŸ‡¸ğŸ‡¸"),
    ("ST", "Sao Tome and Principe", "ğŸ‡¸ğŸ‡¹"),
    ("SV", "El Salvador", "ğŸ‡¸ğŸ‡»"),
    ("SX", "Sint Maarten (Dutch part)", "ğŸ‡¸ğŸ‡½"),
    ("SY", "Syrian Arab Republic", "ğŸ‡¸ğŸ‡¾"),
    ("SZ", "Eswatini", "ğŸ‡¸ğŸ‡¿"),
    ("TC", "Turks and Caicos Islands", "ğŸ‡¹ğŸ‡¨"),
    ("TD", "Chad", "ğŸ‡¹ğŸ‡©"),
    ("TF", "French Southern Territories", "ğŸ‡¹ğŸ‡«"),
    ("TG", "Togo", "ğŸ‡¹ğŸ‡¬"),
    ("TH", "Thailand", "ğŸ‡¹ğŸ‡­"),
    ("TJ", "Tajikistan", "ğŸ‡¹ğŸ‡¯"),
    ("TK", "Tokelau", "ğŸ‡¹ğŸ‡°"),
    ("TL", "Timor-Leste", "ğŸ‡¹ğŸ‡±"),
    ("TM", "Turkmenistan", "ğŸ‡¹ğŸ‡²"),
    ("TN", "Tunisia", "ğŸ‡¹ğŸ‡³"),
    ("TO", "Tonga", "ğŸ‡¹ğŸ‡´"),
    ("TR", "TÃ¼rkiye", "ğŸ‡¹ğŸ‡·"),
    ("TT", "Trinidad and Tobago", "ğŸ‡¹ğŸ‡¹"),
    ("TV", "Tuvalu", "ğŸ‡¹ğŸ‡»"),
    ("TW", "Taiwan (Province of China)", "ğŸ‡¹ğŸ‡¼"),
    ("TZ", "Tanzania,", "ğŸ‡¹ğŸ‡¿"),
    ("UA", "Ukraine", "ğŸ‡ºğŸ‡¦"),
    ("UG", "Uganda", "ğŸ‡ºğŸ‡¬"),
    ("UM", "United States Minor Outlying Islands", "ğŸ‡ºğŸ‡²"),
    ("US", "United States of America", "ğŸ‡ºğŸ‡¸"),
    ("UY", "Uruguay", "ğŸ‡ºğŸ‡¾"),
    ("UZ", "Uzbekistan", "ğŸ‡ºğŸ‡¿"),
    ("VA", "Holy See", "ğŸ‡»ğŸ‡¦"),
    ("VC", "Saint Vincent and", "ğŸ‡»ğŸ‡¨"),
    ("VE", "Venezuela (Bolivarian Republic of)", "ğŸ‡»ğŸ‡ª"),
    ("VG", "Virgin Islands (British)", "ğŸ‡»ğŸ‡¬"),
    ("VI", "Virgin Islands (U.S.)", "ğŸ‡»ğŸ‡®"),
    ("VN", "Viet Nam", "ğŸ‡»ğŸ‡³"),
    ("VU", "Vanuatu", "ğŸ‡»ğŸ‡º"),
    ("WF", "Wallis and Futuna", "ğŸ‡¼ğŸ‡«"),
    ("WS", "Samoa", "ğŸ‡¼ğŸ‡¸"),
    ("YE", "Yemen", "ğŸ‡¾ğŸ‡ª"),
    ("YT", "Mayotte", "ğŸ‡¾ğŸ‡¹"),
    ("ZA", "South Africa", "ğŸ‡¿ğŸ‡¦"),
    ("ZM", "Zambia", "ğŸ‡¿ğŸ‡²"),
    ("ZW", "Zimbabwe", "ğŸ‡¿ğŸ‡¼"),
];

#[derive(Debug)]
struct CountryPhoneDescriptor {
    country: String,
    alpha2: String,
    flag: String,
    code: String,
    landline_format: String,
    mobile_format: String,
    possible_lengths: Vec<u16>,
    leading_digits: Option<String>,
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let response = reqwest::get(METADATA_URL).await?;
    let raw_metadata = response.bytes().await?;
    let raw_metadata = std::str::from_utf8(&raw_metadata)?;
    let cursor = Cursor::new(raw_metadata);
    let metadata = loader::load(BufReader::new(cursor))?;

    let mut country_descriptors = std::collections::BTreeMap::new();
    metadata.iter().for_each(|country_metadata| {
        if let (Some(alpha2), Some(fixed_line), Some(mobile)) = (
            &country_metadata.id,
            &country_metadata.fixed_line,
            &country_metadata.mobile,
        ) {
            if let Some((_, full_name, flag)) =
                COUNTRIES.iter().find(|(code, _, _)| *code == alpha2)
            {
                let mut possible_lengths = Vec::new();
                possible_lengths.extend(fixed_line.possible_length.clone());
                possible_lengths.extend(fixed_line.possible_local_length.clone());
                possible_lengths.extend(mobile.possible_length.clone());
                possible_lengths.extend(mobile.possible_local_length.clone());
                possible_lengths.sort();
                possible_lengths.dedup();

                country_descriptors.insert(
                    alpha2.to_string(),
                    CountryPhoneDescriptor {
                        country: full_name.to_string(),
                        flag: flag.to_string(),
                        alpha2: alpha2.to_string(),
                        code: country_metadata.country_code.unwrap().to_string(),
                        landline_format: fixed_line.national_number.as_ref().unwrap().to_string(),
                        mobile_format: mobile.national_number.as_ref().unwrap().to_string(),
                        possible_lengths,
                        leading_digits: country_metadata.leading_digits.clone(),
                    },
                );
            }
        };
    });

    let by_alpha2 =
        country_descriptors
            .iter()
            .fold(String::new(), |mut acc, (_country, descriptor)| {
                acc += "#(";
                acc = acc + "\"" + &descriptor.alpha2 + "\"";

                acc += ",#(";
                acc = acc + "\"" + &descriptor.country + "\",";
                acc = acc + "\"" + &descriptor.flag + "\",";
                acc = acc + "\"" + &descriptor.code + "\",";

                acc = acc
                    + "\""
                    + &descriptor
                        .mobile_format
                        .replace([' ', '\n', '\t'], "")
                        .replace('\\', "\\\\")
                    + "\",";

                acc = acc
                    + "\""
                    + &descriptor
                        .landline_format
                        .replace([' ', '\n', '\t'], "")
                        .replace('\\', "\\\\")
                    + "\",";

                acc = acc
                    + "["
                    + (descriptor
                        .possible_lengths
                        .iter()
                        .map(|length| length.to_string())
                        .collect::<Vec<String>>()
                        .join(","))
                    .as_str()
                    + "],";

                if descriptor.leading_digits.is_some() {
                    let leading = descriptor.leading_digits.clone().unwrap();
                    acc = acc + "option.Some(\"" + leading.as_str() + "\"),"
                } else {
                    acc += "option.None,"
                };

                acc += "),),";
                acc
            });

    let by_code =
        country_descriptors
            .iter()
            .fold(String::new(), |mut acc, (_country, descriptor)| {
                acc += "#(";
                acc = acc + "\"" + &descriptor.code + "\"";
                acc += ",#(";

                acc = acc + "\"" + &descriptor.country + "\",";
                acc = acc + "\"" + &descriptor.alpha2 + "\",";
                acc = acc + "\"" + &descriptor.flag + "\",";

                acc = acc
                    + "\""
                    + &descriptor
                        .mobile_format
                        .replace([' ', '\n', '\t'], "")
                        .replace('\\', "\\\\")
                    + "\",";
                acc = acc
                    + "\""
                    + &descriptor
                        .landline_format
                        .replace([' ', '\n', '\t'], "")
                        .replace('\\', "\\\\")
                    + "\",";

                acc = acc
                    + "["
                    + (descriptor
                        .possible_lengths
                        .iter()
                        .map(|length| length.to_string())
                        .collect::<Vec<String>>()
                        .join(","))
                    .as_str()
                    + "],";

                if descriptor.leading_digits.is_some() {
                    let leading = descriptor.leading_digits.clone().unwrap();
                    acc = acc + "option.Some(\"" + leading.as_str() + "\"),"
                } else {
                    acc += "option.None,"
                };

                acc += "),),";
                acc
            });

    let gleam_map = String::from("//// This file is generated by metadata-provider\n")
        + &String::from("import gleam/option\n")
        + &String::from("pub const by_alpha2=[")
        + &by_alpha2
        + &String::from("]\n")
        + &String::from("pub const by_code=[")
        + &by_code
        + &String::from("]");

    let mut gleam_file = std::fs::File::create(GLEAM_FILE_PATH)?;
    gleam_file.write_all(gleam_map.as_bytes())?;

    Ok(())
}
